#summary Sample project to demonstrate usage of gwt-fast-table.

= Introduction =

Sample project to demonstrate usage of gwt-fast-table. Subject to change, as described in RoadMap.


= Details =

A sample project demonstrating usage is included. It is available live [http://fast-table-sample.appspot.com/ here]. Mousing over a name or zip highlights the cell, demonstrating that we have access to the underlying DOM elements. Clicking on a name or zip opens a popup showing a description of the underlying object.

The sample project 

  * generates 1000 sample domain objects
  * builds a row for each domain object
  * builds a cell (column) for each field of the domain object
  * specifies a CSS style for each cell
  * adds handlers for the first and last columns

This snippet gives you an idea of the simple sample objects we'll show in the table:

{{{
	public SampleModel() {
		super();
		this.name = randomSample(names);
		this.street = randomSample(streets);
		this.city = randomSample(cities);
		this.state = randomSample(states);
		this.zip = randomSample(zips);
	}
}}}

Here's a snippet showing how the table, rows and columns are built:

{{{
		final Table<SampleModel> table = new Table<SampleModel>("Simple");
		CellListener<SampleModel> cellListener = buildCellListener(body);
		final CellHandlerWrapper<SampleModel> cellHandler = table
				.registerCellHandler(ON_CLICK, cellListener);
		// note that the same call handler can handle multiple events
		cellHandler.addEvent(ON_MOUSE_OVER);
		cellHandler.addEvent(ON_MOUSE_OUT);
		// get a bunch of model objects
		final ArrayList<SampleModel> samples = SampleModel.getSamples(1000);
		// add rows and cells for the model objects
		for (final SampleModel sample : samples) {
			final Row row = table.newRow();
			// associate the model object with the row
			final String objectId = table.register(sample, row);
			// add style info, an event handler, and set the contents
			// here we only add the event handler to NAME and ZIP
			row.newCell().setStyle(NAME)
					.addHandler(cellHandler, objectId, NAME)
					.addContents(sample.name);
			row.newCell().setStyle(STREET).addContents(sample.street);
			row.newCell().setStyle(CITY).addContents(sample.city);
			row.newCell().setStyle(STATE).addContents(sample.state);
			row.newCell().setStyle(ZIP).addHandler(cellHandler, objectId, ZIP)
					.addContents(sample.zip);
		}
		final String html = table.toString();
}}}

Here's a snippet of the cell listener.

{{{
	private CellListener<SampleModel> buildCellListener(final Element body) {
		return new CellListener<SampleModel>() {
			@Override
			public void handleCellEvent(SampleModel object, String event,
					String field, String refId) {
				if (ON_CLICK.equalsIgnoreCase(event)) {
					handleClick(object, event, field);
				} else {
					handleMouseOver(body, event, field, refId);
				}
			}

			/**
			 * The user clicked. Popup an alert showing what we know
			 * 
			 * @param object
			 *            The model object
			 * @param event
			 *            The event which was triggered
			 * @param field
			 *            identifier for the cell/field which triggered the
			 *            event
			 */
			private void handleClick(SampleModel object, String event,
					String field) {
				Window.alert("Event: " + event + "\nObject: "
						+ object.toString() + "\nField: " + field);
			}

			/**
			 * Toggle highlighting of the cells triggering the event
			 * @param body The root page element
			 * @param event The event triggered
			 * @param field Indicates the cell/field which triggered the event
			 * @param refId Identifier for the row and model object
			 */
			private void handleMouseOver(final Element body, String event,
					String field, String refId) {
				// demonstrates that we know what row the event was
				// on
				com.google.gwt.dom.client.Element elementForRow = body
						.getOwnerDocument().getElementById(refId);
				com.google.gwt.dom.client.Element firstChild = elementForRow
						.getFirstChildElement();
				// demonstrates field dependent behavior
				com.google.gwt.dom.client.Element elementForField = NAME
						.equalsIgnoreCase(field) ? firstChild : firstChild
						.getNextSiblingElement().getNextSiblingElement()
						.getNextSiblingElement().getNextSiblingElement();
				// demonstrates event dependent behavior
				if (ON_MOUSE_OVER.equalsIgnoreCase(event)) {
					elementForField.addClassName(HIGHLIGHT);
				} else {
					elementForField.removeClassName(HIGHLIGHT);
				}
			}
		};
	}
}}}

Here's the interface used to manage CSS entries:

{{{
public interface Style {
	final static String CITY = "city";
	final static String NAME = "name";
	final static String STATE = "state";
	final static String STREET = "street";
	final static String ZIP = "zip";
	final static String HIGHLIGHT = "highlight";
}
}}}

Here's the sample CSS:

{{{
.name {
	font-size: 1em;
	font-weight: bold;
	color: blue;
	text-align: right;
	border-width: thin;
	padding-right: 1.5em;
	cursor: pointer;
}

table {
	border-collapse: collapse;
	border-width: medium;
	margin: 2em;
	border-style: outset;
	border-color: gray;
	border-collapse: collapse;
}

td {
	padding-left: 1em;
	padding-right: 1em;
	border-color: black;
	border-width: thin;
	border-style: inset;
	border-color: gray;
}

tr {
	padding: 5px;
}

.street {
	border-width: thin;
	border-right-width: 0;
}

.city {
	border-width: thin;
	border-left-width: 0;
	border-right-width: 0;
}

.state {
	border-width: thin;
	border-left-width: 0;
}

.zip {
	border-width: thin;
	cursor: pointer;
}

.highlight {
	background-color: yellow;
}
}}}